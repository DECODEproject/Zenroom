// Generated by build/codegen_ecp_factory.sh
// Wed 27 May 2020 12:53:40 PM CEST

#ifndef __ZEN_BIG_TYPES_H__
#define __ZEN_BIG_TYPES_H__
#include <arch.h>

#include <fp12_BLS461.h>
// cascades includes for big_ fp_ fp2_ and fp4_

#define BIG BIG_464_28

// from milagro's pair_BLS461.h
extern void PAIR_BLS461_GTpow(FP12_BLS461 *x,BIG_464_28 b);


// instance is in rom_field_XXX.c and included by fp_XXX.h
/* #define Modulus Modulus_BLS383
#define CURVE_Gx CURVE_Gx_BLS383
#define CURVE_Gy CURVE_Gy_BLS383
		 // 0x73435FD from rom_field_BLS383 at 32bit
*/

#define Montgomery MConst_BLS461

// CHUNK is 32bit

#define BIG  BIG_464_28
#define DBIG DBIG_464_28
#define MODBYTES MODBYTES_464_28
#define BIGLEN NLEN_464_28
#define DBIGLEN DNLEN_464_28
#define BIG_zero(b) BIG_464_28_zero(b)
#define BIG_fromBytesLen(b,v,l) BIG_464_28_fromBytesLen(b,v,l)
#define BIG_iszilch(b) BIG_464_28_iszilch(b)
#define BIG_diszilch(b) BIG_464_28_diszilch(b)
#define BIG_inc(b,n) BIG_464_28_inc(b,n)
#define BIG_norm(b) BIG_464_28_norm(b)
#define BIG_nbits(b) BIG_464_28_nbits(b)
#define BIG_copy(b,a) BIG_464_28_copy(b,a)
#define BIG_rcopy(b,a) BIG_464_28_rcopy(b,a)
#define BIG_shl(b,a) BIG_464_28_shl(b,a)
#define BIG_shr(b,a) BIG_464_28_shr(b,a)
#define BIG_fshl(b,a) BIG_464_28_fshl(b,a)
#define BIG_fshr(b,a) BIG_464_28_fshr(b,a)
#define BIG_dshl(b,a) BIG_464_28_dshl(b,a)
#define BIG_dshr(b,a) BIG_464_28_dshr(b,a)
#define BIG_parity(b) BIG_464_28_parity(b)
#define BIG_isunity(b) BIG_464_28_isunity(b)
#define BIG_toBytes(b,a) BIG_464_28_toBytes(b,a)
#define BIG_comp(l,r) BIG_464_28_comp(l,r)
#define BIG_add(d,l,r) BIG_464_28_add(d,l,r)
#define BIG_sub(d,l,r) BIG_464_28_sub(d,l,r)
#define BIG_mul(d,l,r) BIG_464_28_mul(d,l,r)
#define BIG_mod(x,n) BIG_464_28_mod(x,n)
#define BIG_invmodp(x,y,n) BIG_464_28_invmodp(x,y,n)
#define BIG_monty(d,m,c,s) BIG_464_28_monty(d,m,c,s)
// #define BIG_dmod(a,b,c) BIG_464_28_dmod(a,b,c)
#define BIG_sdiv(x,n) BIG_464_28_sdiv(x,n)
#define BIG_ddiv(d,l,r) BIG_464_28_ddiv(d,l,r)
#define BIG_modmul(x,y,z,n) BIG_464_28_modmul(x,y,z,n)
#define BIG_moddiv(x,y,z,n) BIG_464_28_moddiv(x,y,z,n)
#define BIG_modsqr(x,y,n) BIG_464_28_modsqr(x,y,n)
#define BIG_modneg(x,y,n) BIG_464_28_modneg(x,y,n)
#define BIG_jacobi(x,y) BIG_464_28_jacobi(x,y)
#define BIG_random(m,r) BIG_464_28_random(m,r)
#define BIG_randomnum(m,q,r) BIG_464_28_randomnum(m,q,r)

#define BIG_sqr(x,y) BIG_464_28_sqr(x,y);
#define BIG_dcopy(d,s) BIG_464_28_dcopy(d,s)
#define BIG_sducopy(d,s) BIG_464_28_sducopy(d,s)
#define BIG_sdcopy(d,s) BIG_464_28_sdcopy(d,s)
#define BIG_dnorm(x) BIG_464_28_dnorm(x)
#define BIG_dcomp(l,r) BIG_464_28_dcomp(l,r)
#define BIG_dscopy(d,s) BIG_464_28_dscopy(d,s)
#define BIG_dsub(d,l,r) BIG_464_28_dsub(d,l,r)
#define BIG_dadd(d,l,r) BIG_464_28_dadd(d,l,r)
#define BIG_dmod(d,l,r) BIG_464_28_dmod(d,l,r)
#define BIG_dfromBytesLen(d,o,l) BIG_464_28_dfromBytesLen(d,o,l)
#define BIG_dzero(d) BIG_464_28_dzero(d)
#define BIG_dnbits(d) BIG_464_28_dnbits(d)

#define FP FP_BLS461
#define FP_nres(f,b) FP_BLS461_nres(f,b)
#define FP_copy(d,s) FP_BLS461_copy(d,s)
#define FP_redc(x,y) FP_BLS461_redc(x,y)
#define FP_reduce(x) FP_BLS461_reduce(x)
#define FP_mod(d,s) FP_BLS461_mod(d,s)

#define FP12 FP12_BLS461
// #define FP12_zero(b) FP12_BLS461_zero(b)
#define FP12_copy(d,s) FP12_BLS461_copy(d,s)
#define FP12_eq(l,r) FP12_BLS461_equals(l,r)
// #define FP12_cmove(d,s,c) FP12_BLS461_cmove(d,s,c)
#define FP12_fromOctet(f,o) FP12_BLS461_fromOctet(f,o)
#define FP12_toOctet(o,f) FP12_BLS461_toOctet(o,f)
#define FP12_mul(l, r) FP12_BLS461_mul(l, r)
// #define FP12_imul(d, l, r) FP12_BLS461_imul(d, l, r)
#define FP12_sqr(d, s) FP12_BLS461_sqr(d, s)
// #define FP12_add(d, l, r) FP12_BLS461_add(d, l, r)
// #define FP12_sub(d, l, r) FP12_BLS461_sub(d, l, r)
#define FP12_div2(d, s) FP12_BLS461_div2(d,s)
#define FP12_GTpow(x, b) PAIR_BLS461_GTpow(x,b)
// #define FP12_pinpow(r, x, b) FP12_BLS461_pinpow(r,x,b)

// #define FP12_sqrt(d,s) FP12_BLS461_sqrt(d,s)
// #define FP12_neg(d,s) FP12_BLS461_neg(d,s)
// #define FP12_reduce(f) FP12_BLS461_reduce(f)
// #define FP12_norm(f) FP12_BLS461_norm(f)
// #define FP12_qr(f) FP12_BLS461_qr(f)
#define FP12_inv(d,s) FP12_BLS461_inv(d,s)

#endif // _H_
