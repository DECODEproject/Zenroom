bbs = require'crypto_bbs'
hkdf_tests = {
    {
        ikm='0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b',
        salt='000102030405060708090a0b0c',
        info='f0f1f2f3f4f5f6f7f8f9',
        l=42,

        prk='077709362c2e32df0ddc3f0dc47bba6390b6c73bb50f9c3122ec844ad7c2b3e5',
        okm='3cb25f25faacd57a90434f64d0362f2a2d2d0a90cf1a5a4c5db02d56ecc4c5bf34007208d5b887185865'
    },
    {
        ikm='000102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f202122232425262728292a2b2c2d2e2f303132333435363738393a3b3c3d3e3f404142434445464748494a4b4c4d4e4f',
        salt='606162636465666768696a6b6c6d6e6f707172737475767778797a7b7c7d7e7f808182838485868788898a8b8c8d8e8f909192939495969798999a9b9c9d9e9fa0a1a2a3a4a5a6a7a8a9aaabacadaeaf',
        info='b0b1b2b3b4b5b6b7b8b9babbbcbdbebfc0c1c2c3c4c5c6c7c8c9cacbcccdcecfd0d1d2d3d4d5d6d7d8d9dadbdcdddedfe0e1e2e3e4e5e6e7e8e9eaebecedeeeff0f1f2f3f4f5f6f7f8f9fafbfcfdfeff',
        l=82,

        prk='06a6b88c5853361a06104c9ceb35b45cef760014904671014a193f40c15fc244',
        okm='b11e398dc80327a1c8e7f78c596a49344f012eda2d4efad8a050cc4c19afa97c59045a99cac7827271cb41c65e590e09da3275600c2f09b8367793a9aca3db71cc30c58179ec3e87c14c01d5c1f3434f1d87'
    },
    {
        ikm='0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b',
        salt=O.empty(),
        info=O.empty(),
        l=42,

        prk='19ef24a32c717b167f33a91d6f648bdf96596776afdb6377ac434c1c293ccb04',
        okm='8da4e775a563c18f715f802a063c5a31b8a11f5c5ee1879ec3454e5f3c738d2d9d201395faa4b61a96c8'
    },
}

local function run_test_hkdf(test)
    if type(test.salt) == 'string' then
        test.salt = O.from_hex(test.salt)
    end
    if type(test.info) == 'string' then
        test.info = O.from_hex(test.info)
    end
    prk = bbs.hkdf_extract(test.salt, O.from_hex(test.ikm))
    assert(O.from_hex(test.prk) == prk)
    okm = bbs.hkdf_expand(prk, test.info, test.l)
    assert(O.from_hex(test.okm) == okm)
end

print('----------------------')
print("TEST: hkdf (extract + expand)")
for k,v in pairs(hkdf_tests) do
    print("Test Case " .. k)
    run_test_hkdf(v)
end

-- Key Pair
local ikm = O.from_hex('746869732d49532d6a7573742d616e2d546573742d494b4d2d746f2d67656e65726174652d246528724074232d6b6579')
local key_info = O.from_hex('746869732d49532d736f6d652d6b65792d6d657461646174612d746f2d62652d757365642d696e2d746573742d6b65792d67656e')
local sk = bbs.keygen(ikm, key_info)
assert(sk == BIG.new(O.from_hex('4a39afffd624d69e81808b2e84385cc80bf86adadf764e030caa46c231f2a8d7')))
p=bbs.sk2pk(sk)

oct = O.from_hex('aaff983278257afc45fa9d44d156c454d716fb1a250dfed132d65b2009331f618c623c14efa16245f50cc92e60334051087f1ae92669b89690f5feb92e91568f95a8e286d110b011e9ac9923fd871238f57d1295395771331ff6edee43e4ccc6')
assert(bbs.sk2pk(sk) == ECP2.zcash_import(O.from_hex('aaff983278257afc45fa9d44d156c454d716fb1a250dfed132d65b2009331f618c623c14efa16245f50cc92e60334051087f1ae92669b89690f5feb92e91568f95a8e286d110b011e9ac9923fd871238f57d1295395771331ff6edee43e4ccc6')))

-- expand_message_xmd(SHA-256)
local DST_test = 'QUUX-V01-CS02-with-expander-SHA256-128'

-- Test vectors originated from:
-- draft-irtf-cfrg-hash-to-curve, Appendix K.1
local expand_message_xmd_SHA_256_test = {
    {
      msg     = '',
      len_in_bytes = '0x20',
      DST_prime = '515555582d5630312d435330322d776974682d657870616e6465722d5348413235362d31323826', 
      msg_prime = '00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002000515555582d5630312d435330322d776974682d657870616e6465722d5348413235362d31323826',
      uniform_bytes = '68a985b87eb6b46952128911f2a4412bbc302a9d759667f87f7a21d803f07235'
    },
    {
        msg  = 'abc',
        len_in_bytes = '0x20',
        DST_prime = '515555582d5630312d435330322d776974682d657870616e6465722d5348413235362d31323826',
        msg_prime = '00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000616263002000515555582d5630312d435330322d776974682d657870616e6465722d5348413235362d31323826',
        uniform_bytes = 'd8ccab23b5985ccea865c6c97b6e5b8350e794e603b4b97902f53a8a0d605615',
    },
    {    
        msg  = 'abcdef0123456789',
        len_in_bytes = '0x20',
        DST_prime = '515555582d5630312d435330322d776974682d657870616e6465722d5348413235362d31323826',
        msg_prime = '0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000061626364656630313233343536373839002000515555582d5630312d435330322d776974682d657870616e6465722d5348413235362d31323826',
        uniform_bytes = 'eff31487c770a893cfb36f912fbfcbff40d5661771ca4b2cb4eafe524333f5c1'
    },
    {
        msg  = 'q128_qqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq',
        len_in_bytes = '0x20',
        DST_prime = '515555582d5630312d435330322d776974682d657870616e6465722d5348413235362d31323826',
        msg_prime = '00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000713132385f7171717171717171717171717171717171717171717171717171717171717171717171717171717171717171717171717171717171717171717171717171717171717171717171717171717171717171717171717171717171717171717171717171717171717171717171717171717171717171717171717171717171717171002000515555582d5630312d435330322d776974682d657870616e6465722d5348413235362d31323826',
        uniform_bytes = 'b23a1d2b4d97b2ef7785562a7e8bac7eed54ed6e97e29aa51bfe3f12ddad1ff9'
    },
    {
        msg  = 'a512_aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa',
        len_in_bytes = '0x20',
        DST_prime = '515555582d5630312d435330322d776974682d657870616e6465722d5348413235362d31323826',
        msg_prime = '00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000613531325fd5630312d435330322d776974682d657870616e6465722d5348413235362d31323826',
        uniform_bytes = '4623227bcc01293b8c130bf771da8c298dede7383243dc0993d2d94823958c4c'
    },
    {
        msg  = '',
        len_in_bytes = '0x80',
        DST_prime = '515555582d5630312d435330322d776974682d657870616e6465722d5348413235362d31323826',
        msg_prime = '00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000008000515555582d5630312d435330322d776974682d657870616e6465722d5348413235362d31323826',
        uniform_bytes = 'af84c27ccfd45d41914fdff5df25293e221afc53d8ad2ac06d5e3e29485dadbee0d121587713a3e0dd4d5e69e93eb7cd4f5df4cd103e188cf60cb02edc3edf18eda8576c412b18ffb658e3dd6ec849469b979d444cf7b26911a08e63cf31f9dcc541708d3491184472c2c29bb749d4286b004ceb5ee6b9a7fa5b646c993f0ced'
    },
    {
msg     = 'abc',
len_in_bytes = '0x80',
DST_prime = '515555582d5630312d435330322d776974682d657870616e6465722d5348413235362d31323826',
msg_prime = '00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000616263008000515555582d5630312d435330322d776974682d657870616e6465722d5348413235362d31323826',
uniform_bytes = 'abba86a6129e366fc877aab32fc4ffc70120d8996c88aee2fe4b32d6c7b6437a647e6c3163d40b76a73cf6a5674ef1d890f95b664ee0afa5359a5c4e07985635bbecbac65d747d3d2da7ec2b8221b17b0ca9dc8a1ac1c07ea6a1e60583e2cb00058e77b7b72a298425cd1b941ad4ec65e8afc50303a22c0f99b0509b4c895f40'
    },
    {
msg     = 'abcdef0123456789',
len_in_bytes = '0x80',
DST_prime = '515555582d5630312d435330322d776974682d657870616e6465722d5348413235362d31323826',
msg_prime = '0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000061626364656630313233343536373839008000515555582d5630312d435330322d776974682d657870616e6465722d5348413235362d31323826',
uniform_bytes = 'ef904a29bffc4cf9ee82832451c946ac3c8f8058ae97d8d629831a74c6572bd9ebd0df635cd1f208e2038e760c4994984ce73f0d55ea9f22af83ba4734569d4bc95e18350f740c07eef653cbb9f87910d833751825f0ebefa1abe5420bb52be14cf489b37fe1a72f7de2d10be453b2c9d9eb20c7e3f6edc5a60629178d9478df'
    },
    {
msg  = 'q128_qqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq',
len_in_bytes = '0x80',
DST_prime = '515555582d5630312d435330322d776974682d657870616e6465722d5348413235362d31323826',
msg_prime = '00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000713132385f7171717171717171717171717171717171717171717171717171717171717171717171717171717171717171717171717171717171717171717171717171717171717171717171717171717171717171717171717171717171717171717171717171717171717171717171717171717171717171717171717171717171717171008000515555582d5630312d435330322d776974682d657870616e6465722d5348413235362d31323826',
uniform_bytes = '80be107d0884f0d881bb460322f0443d38bd222db8bd0b0a5312a6fedb49c1bbd88fd75d8b9a09486c60123dfa1d73c1cc3169761b17476d3c6b7cbbd727acd0e2c942f4dd96ae3da5de368d26b32286e32de7e5a8cb2949f866a0b80c58116b29fa7fabb3ea7d520ee603e0c25bcaf0b9a5e92ec6a1fe4e0391d1cdbce8c68a'

    },
    {
msg     = 'a512_aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa',
len_in_bytes = '0x80',
DST_prime = '515555582d5630312d435330322d776974682d657870616e6465722d5348413235362d31323826',
msg_prime = '00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000613531325fd5630312d435330322d776974682d657870616e6465722d5348413235362d31323826',
uniform_bytes = '546aff5444b5b79aa6148bd81728704c32decb73a3ba76e9e75885cad9def1d06d6792f8a7d12794e90efed817d96920d728896a4510864370c207f99bd4a608ea121700ef01ed879745ee3e4ceef777eda6d9e5e38b90c86ea6fb0b36504ba4a45d22e86f6db5dd43d98a294bebb9125d5b794e9d2a81181066eb954966a487'
    }

}

local function run_test_expand_message_xmd_SHA_256 (test)
    local output_bytes, output_DST, output_msg = bbs.expand_message_xmd(O.from_string(test.msg), O.from_string(DST_test), tonumber(test.len_in_bytes))
    assert(output_bytes:hex() == test.uniform_bytes, "Wrong output bytes")
    assert(output_DST:hex() == test.DST_prime, "Wrong dst prime")
    assert(output_msg:hex() == test.msg_prime, "Wrong msg_prime")
end

print('----------------------')
print("TEST: expand_message_xmd (SHA-256)")
for k,v in pairs(expand_message_xmd_SHA_256_test) do
    print("Test Case " .. k)
    run_test_expand_message_xmd_SHA_256(v)
end