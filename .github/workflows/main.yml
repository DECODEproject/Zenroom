on: [push, pull_request]

concurrency:
  group: ci-tests-${{ github.ref }}-1
  cancel-in-progress: true

jobs:
  reuse:
    name: üö® REUSE Compliance
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: fsfe/reuse-action@v1

  c-lint:
    name: üö® C lint
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: reviewdog/action-cpplint@master
        env:
          REVIEWDOG_GITHUB_API_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          reporter: github-pr-check
          targets: --recursive src
          level: warning
          flags: --linelength=120 # Optional
          filter: "-readability/braces\
            ,-readability/casting\
            ,-whitespace/comma\
            ,-whitespace/braces\
            ,-whitespace/comments\
            ,-whitespace/indent\
            ,-whitespace/newline\
            ,-whitespace/operators\
            ,-whitespace/parens\
            ,-whitespace/tab\
            " # Optional
        #    - name: Fail fast?!
        #      if: steps.linter.outputs.checks-failed > 0
        #      run: |
        #        echo "üò§ Some files failed the C linting checks!"

  lua-lint:
    name: üö® Lua lint
    runs-on: ubuntu-latest
    steps:
    # - uses: dorny/paths-filter@v2
    #   with:
    #     filters: |
    #       src:
    #         - 'src/lua'
    # - if: steps.changes.outputs.src == 'true'
    - uses: actions/checkout@v3
    - name: Setup luacheck
      run: |
          if ! hash luacheck &>/dev/null; then
            sudo apt-get install -yq luarocks 1>/dev/null || exit 1
            sudo luarocks install luacheck 1>/dev/null || exit 1
            sudo luarocks install lanes &>/dev/null || true
          fi
          luacheck --version
      shell: bash
    - name: üö® LUA lint
      continue-on-error: true
      working-directory: src/lua
      run: |
        luacheck --config .luacheckrc --std lua54 .

  meson:
    name: ü•∑ meson/ninja tests
    if: always()
    needs: [reuse, c-lint, lua-lint]
    strategy:
      matrix:
        compiler: [clang-9, clang-10, clang-11, gcc-7, gcc-8, gcc-9, gcc-10]
      fail-fast: false
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-python@v3
      - uses: seanmiddleditch/gha-setup-ninja@master
      - name: Install compiler and dependencies
        run: |
          sudo add-apt-repository ppa:ubuntu-toolchain-r/test
          sudo apt-get install --force-yes ${{ matrix.compiler }}
          sudo apt-get install --force-yes cmake vim zsh luajit lua-cjson ccache
          pip3 install meson ninja
      - uses: hendrikmuhs/ccache-action@v1.2
      - run: make meson-ccache && ninja -C meson
        env:
          CC: ${{ matrix.compiler }}
      - run: make meson-test

  linux-crypto:
    name: üêß Linux crypto tests
    if: always()
    needs: [meson]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - run: |
          sudo apt install zsh jq meson
          make linux
          make check-crypto

  macosx-crypto:
    name: üçé macos crypto tests
    runs-on: macos-latest
    if: always()
    needs: [meson]
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-python@v3
      - uses: seanmiddleditch/gha-setup-ninja@master
      - run: |
          pip install meson
          make osx
          make check-osx
